#!/usr/bin/env bash

## Print the installed gem version
#
# Use:
#     cat_gemfile [GEM_NAME]
function cat_gemfile() {
  cat Gemfile.lock | grep $1
}

## Log into service Pod
#
# Example:
#
#     alpha_service_pod forms [POD_ID]
function alpha_service_pod() {
  service_name=$1
  service_id=$2
  valid_services="therapists, edge, marketplace"

  case $service_name in
    therapists)
      kubectl exec -it -n therapist-credentialing-backend "therapist-credentialing-backend-$service_id" -- sh
      ;;
    edge)
      kubectl exec -it -n backend "backend-$service_id" -- sh
      ;;
    marketplace)
      kubectl exec -it -n marketplace "marketplace-$service_id" -- sh
      ;;
    *)
      echo -e "Valid services are:\n $valid_services"
      ;;
  esac
}

## Auto-login to latest pod for each service
function alpha_therapists_pod() {
  latest_pod=$(kubectl get po -n therapist-credentialing-backend --sort-by=.metadata.creationTimestamp | tail -1 | awk '{print $1}')
  kubectl exec -it -n therapist-credentialing-backend "$latest_pod" -- sh
}

function alpha_edge_pod() {
  latest_pod=$(kubectl get po -n backend --sort-by=.metadata.creationTimestamp | tail -1 | awk '{print $1}')
  kubectl exec -it -n backend "$latest_pod" -- sh
}

function alpha_marketplace_pod() {
  latest_pod=$(kubectl get po -n marketplace --sort-by=.metadata.creationTimestamp | tail -1 | awk '{print $1}')
  kubectl exec -it -n marketplace "$latest_pod" -- sh
}

## Kills rails server on port 3000
function matar_servidor_rails() {
  kill -9 $(lsof -i tcp:3000 -t)
}

# Convierte un hash de Ruby con credenciales de create_new_auth_token
# en cabeceras HTTP para usar en peticiones GQL desde Postman
#
# Ejemplo:
#
#    ruby_hash='{"access-token"=>"eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJjYTkyZDQwOC1kZjdlLTRiYWUtOTJhMS01ODc0Y2VhYmJlZDQiLCJpYXQiOjE3NDM1MTYwMTh9.dgtHGQEBVnKL6Vok1-jkf3X1okoWnFQmoTBvjXpnhRA", "token-type"=>"Bearer", "client"=>"kPaUWyE92m9eq_q7J20lWg", "expiry"=>"1803516018", "uid"=>"steve+nt@getluna.com", "Authorization"=>"Bearer eyJhY2Nlc3MtdG9rZW4iOiJleUpoYkdjaU9pSklVekkxTmlKOS5leUp6ZFdJaU9pSmpZVGt5WkRRd09DMWtaamRsTFRSaVlXVXRPVEpoTVMwMU9EYzBZMlZoWW1KbFpEUWlMQ0pwWVhRaU9qRTNORE0xTVRZd01UaDkuZGd0SEdRRUJWbktMNlZvazEtamtmM1gxb2tvV25GUW1vVEJ2alhwbmhSQSIsInRva2VuLXR5cGUiOiJCZWFyZXIiLCJjbGllbnQiOiJrUGFVV3lFOTJtOWVxX3E3SjIwbFdnIiwiZXhwaXJ5IjoiMTgwMzUxNjAxOCIsInVpZCI6InN0ZXZlK250QGdldGx1bmEuY29tIn0="}'
#
#    headers_from_ruby_hash "$ruby_hash"
#
# Nota como el hash está en una sola línea. Y clave envolver la variable entre comilla doble.
function headers_from_ruby_hash() {
  # Usar un here-string para evitar problemas con comillas
  ruby_hash=$(cat <<< "$1")

  # Convertir hash Ruby a JSON válido de manera más robusta
  json=$(echo "$ruby_hash" | \
         sed -E 's/=>/:/g' | \
         sed -E 's/: *"/:"/g' | \
         sed -E 's/^\{|\}$//g' | \
         awk '{$1=$1;print}' | \
         sed 's/^/{/' | sed 's/$/}/' | \
         jq '.' 2>/dev/null)

  if [[ $? -ne 0 ]]; then
    echo "Error: No se pudo convertir el hash Ruby a JSON válido." >&2
    echo "Input recibido:" >&2
    echo "$ruby_hash" >&2
    return 1
  fi

  # Convertir JSON a cabeceras HTTP
  echo "$json" | jq -r 'to_entries[] | "\(.key): \(.value)"'
}

# Este hace lo mismo que headers_from_ruby_hash() pero usa Ruby para cargar el Hash y volverlo JSON.
function headers_from_hash_with_ruby() {
  echo "$1" | \
  ruby -r json -e 'puts eval(ARGF.read).to_json' | \
  jq -r 'to_entries[] | "\(.key): \(.value)"'
}

## Convert JSON to one-liner
#
# Usage:
#     json_oneliner [FILE]
#     cat file.json | json_oneliner
function json_oneliner() {
  if [[ $# -eq 0 ]]; then
    jq -c .
  else
    jq -c . "$1"
  fi
}
